{"ast":null,"code":"var _jsxFileName = \"D:\\\\downloads\\\\proiecte_programare\\\\CPDLC_simulator\\\\cpdlc-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"leaflet/dist/leaflet.css\";\nimport WeatherLayer from \"./components/Weather/WeatherLayer\";\nimport WeatherControls from \"./components/Weather/WeatherControls\";\nimport PlaneMarker from \"./components/Aircraft/AircraftMarker\";\nimport MapContainer from \"./components/Map/MapContainer\";\nimport AirspaceMap from \"./components/Map/MapContainer\";\nimport PilotATCPanel from \"./components/Controller/PilotAtcPanel\";\nimport ControllerATCPanel from \"./components/Controller/CommandPanel\";\nimport CommandPanel from \"./components/Controller/CommandPanel\";\nimport { aircraftService } from './services/aircraftService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [showClouds, setShowClouds] = useState(false);\n  const [showWind, setShowWind] = useState(false);\n  const [showPressure, setShowPressure] = useState(false);\n  const [role, setRole] = useState(\"controller\");\n  const [selectedCallsign, setSelectedCallsign] = useState(null);\n  const [planes, setPlanes] = useState([]);\n  const planesRef = useRef(planes);\n  planesRef.current = planes;\n\n  // Fetch aircraft data from backend on component mount\n  useEffect(() => {\n    const fetchAircraft = async () => {\n      try {\n        const data = await aircraftService.fetchAircraft();\n\n        // Filter out any invalid aircraft data first\n        const validPlanesFromBackend = data.filter(plane => plane && plane.callsign && plane.latitude != null && plane.longitude != null).map(plane => ({\n          ...plane,\n          lat: plane.latitude,\n          lng: plane.longitude,\n          heading: plane.heading || 0,\n          // Default heading if missing\n          speed: plane.speed || 0,\n          // Default speed if missing\n          flight_level: plane.flight_level || 0,\n          // Default flight level if missing\n          trail: [[plane.latitude, plane.longitude]],\n          // Add unique identifier to prevent duplicates\n          id: plane.callsign + '_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9)\n        }));\n        console.log('Fetched valid planes:', validPlanesFromBackend.length);\n\n        // Use Set to ensure no duplicate callsigns\n        const existingCallsigns = new Set(planesRef.current.filter(p => p && p.callsign).map(p => p.callsign));\n        const newPlanes = validPlanesFromBackend.filter(plane => !existingCallsigns.has(plane.callsign));\n        console.log('New planes to add:', newPlanes.length);\n        if (newPlanes.length === 0) {\n          console.log('No new planes to add');\n          return;\n        }\n        let index = 0;\n        const spawnInterval = setInterval(() => {\n          if (index >= newPlanes.length) {\n            clearInterval(spawnInterval);\n            return;\n          }\n          setPlanes(prev => {\n            // Filter out any undefined planes and ensure all have callsigns\n            const validPrevPlanes = prev.filter(p => p && p.callsign);\n\n            // Check if plane already exists to prevent duplicates\n            const planeExists = validPrevPlanes.some(p => p.callsign === newPlanes[index].callsign);\n            if (planeExists) {\n              console.log(`Plane ${newPlanes[index].callsign} already exists, skipping`);\n              index++;\n              return validPrevPlanes;\n            }\n            const updatedPlanes = [...validPrevPlanes, newPlanes[index]];\n            console.log(`Added plane: ${newPlanes[index].callsign}`);\n            index++;\n            return updatedPlanes;\n          });\n        }, 200);\n      } catch (error) {\n        console.error('Error fetching aircraft in App component:', error);\n      }\n    };\n    fetchAircraft();\n  }, []);\n  useEffect(() => {\n    let lastTime = performance.now();\n    const interval = setInterval(() => {\n      const currentTime = performance.now();\n      const dt = (currentTime - lastTime) / 1000;\n      lastTime = currentTime;\n      setPlanes(prevPlanes => prevPlanes.filter(p => p && p.callsign && p.speed != null && p.lat != null && p.lng != null && p.heading != null).map(plane => {\n        const speedKms = plane.speed * 1.852 / 3600;\n        const headingRad = plane.heading * Math.PI / 180;\n        const earthRadius = 6371;\n        const deltaLat = speedKms * Math.cos(headingRad) * dt / earthRadius;\n        const deltaLon = speedKms * Math.sin(headingRad) * dt / (earthRadius * Math.cos(plane.lat * Math.PI / 180));\n        const newLat = plane.lat + deltaLat * 180 / Math.PI;\n        const newLng = plane.lng + deltaLon * 180 / Math.PI;\n        return {\n          ...plane,\n          lat: newLat,\n          lng: newLng,\n          trail: [...plane.trail, [newLat, newLng]].slice(-50)\n        };\n      }));\n    }, 4000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Filter out any invalid planes before passing to components\n  const validPlanes = planes.filter(plane => plane && plane.callsign && plane.lat != null && plane.lng != null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      width: \"100vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(WeatherControls, {\n      showClouds: showClouds,\n      setShowClouds: setShowClouds,\n      showWind: showWind,\n      setShowWind: setShowWind,\n      showPressure: showPressure,\n      setShowPressure: setShowPressure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        position: \"absolute\",\n        top: 80,\n        left: 10,\n        zIndex: 1000\n      },\n      onClick: () => setRole(role === \"pilot\" ? \"controller\" : \"pilot\"),\n      children: [\"Switch to \", role === \"pilot\" ? \"Controller\" : \"Pilot\", \" View\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), role === \"pilot\" && selectedCallsign && /*#__PURE__*/_jsxDEV(PilotATCPanel, {\n      plane: validPlanes.find(p => p.callsign === selectedCallsign),\n      onAccept: callsign => alert(`Accepted command for ${callsign}`),\n      onDeny: callsign => alert(`Denied command for ${callsign}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this), role === \"controller\" && selectedCallsign && /*#__PURE__*/_jsxDEV(CommandPanel, {\n      plane: validPlanes.find(p => p.callsign === selectedCallsign),\n      onSendCommand: (callsign, type, value) => alert(`Sent command to ${callsign}: ${type} -> ${value}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AirspaceMap, {\n      planes: validPlanes,\n      selectedCallsign: selectedCallsign,\n      setSelectedCallsign: setSelectedCallsign,\n      showClouds: showClouds,\n      showWind: showWind,\n      showPressure: showPressure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xuC4PPPSl/JXWiwnyAwPz2qVzF0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","WeatherLayer","WeatherControls","PlaneMarker","MapContainer","AirspaceMap","PilotATCPanel","ControllerATCPanel","CommandPanel","aircraftService","jsxDEV","_jsxDEV","App","_s","showClouds","setShowClouds","showWind","setShowWind","showPressure","setShowPressure","role","setRole","selectedCallsign","setSelectedCallsign","planes","setPlanes","planesRef","current","fetchAircraft","data","validPlanesFromBackend","filter","plane","callsign","latitude","longitude","map","lat","lng","heading","speed","flight_level","trail","id","Date","now","Math","random","toString","substr","console","log","length","existingCallsigns","Set","p","newPlanes","has","index","spawnInterval","setInterval","clearInterval","prev","validPrevPlanes","planeExists","some","updatedPlanes","error","lastTime","performance","interval","currentTime","dt","prevPlanes","speedKms","headingRad","PI","earthRadius","deltaLat","cos","deltaLon","sin","newLat","newLng","slice","validPlanes","style","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","position","top","left","zIndex","onClick","find","onAccept","alert","onDeny","onSendCommand","type","value","_c","$RefreshReg$"],"sources":["D:/downloads/proiecte_programare/CPDLC_simulator/cpdlc-frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nimport WeatherLayer from \"./components/Weather/WeatherLayer\";\r\nimport WeatherControls from \"./components/Weather/WeatherControls\";\r\nimport PlaneMarker from \"./components/Aircraft/AircraftMarker\";\r\nimport MapContainer from \"./components/Map/MapContainer\";\r\nimport AirspaceMap from \"./components/Map/MapContainer\";\r\nimport PilotATCPanel from \"./components/Controller/PilotAtcPanel\";\r\nimport ControllerATCPanel from \"./components/Controller/CommandPanel\";\r\nimport CommandPanel from \"./components/Controller/CommandPanel\";\r\n\r\nimport { aircraftService } from './services/aircraftService';\r\n\r\nfunction App() {\r\n  const [showClouds, setShowClouds] = useState(false);\r\n  const [showWind, setShowWind] = useState(false);\r\n  const [showPressure, setShowPressure] = useState(false);\r\n\r\n  const [role, setRole] = useState(\"controller\");\r\n  const [selectedCallsign, setSelectedCallsign] = useState(null);\r\n  \r\n  const [planes, setPlanes] = useState([]);\r\n  const planesRef = useRef(planes);\r\n  planesRef.current = planes;\r\n\r\n  // Fetch aircraft data from backend on component mount\r\n  useEffect(() => {\r\n    const fetchAircraft = async () => {\r\n      try {\r\n        const data = await aircraftService.fetchAircraft();\r\n        \r\n        // Filter out any invalid aircraft data first\r\n        const validPlanesFromBackend = data\r\n          .filter(plane => plane && plane.callsign && plane.latitude != null && plane.longitude != null)\r\n          .map((plane) => ({\r\n            ...plane,\r\n            lat: plane.latitude,\r\n            lng: plane.longitude,\r\n            heading: plane.heading || 0, // Default heading if missing\r\n            speed: plane.speed || 0, // Default speed if missing\r\n            flight_level: plane.flight_level || 0, // Default flight level if missing\r\n            trail: [[plane.latitude, plane.longitude]],\r\n            // Add unique identifier to prevent duplicates\r\n            id: plane.callsign + '_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9)\r\n          }));\r\n        \r\n        console.log('Fetched valid planes:', validPlanesFromBackend.length);\r\n        \r\n        // Use Set to ensure no duplicate callsigns\r\n        const existingCallsigns = new Set(\r\n          planesRef.current\r\n            .filter(p => p && p.callsign)\r\n            .map(p => p.callsign)\r\n        );\r\n        \r\n        const newPlanes = validPlanesFromBackend.filter(plane => \r\n          !existingCallsigns.has(plane.callsign)\r\n        );\r\n        \r\n        console.log('New planes to add:', newPlanes.length);\r\n        \r\n        if (newPlanes.length === 0) {\r\n          console.log('No new planes to add');\r\n          return;\r\n        }\r\n        \r\n        let index = 0;\r\n        const spawnInterval = setInterval(() => {\r\n          if (index >= newPlanes.length) {\r\n            clearInterval(spawnInterval);\r\n            return;\r\n          }\r\n          \r\n          setPlanes(prev => {\r\n            // Filter out any undefined planes and ensure all have callsigns\r\n            const validPrevPlanes = prev.filter(p => p && p.callsign);\r\n            \r\n            // Check if plane already exists to prevent duplicates\r\n            const planeExists = validPrevPlanes.some(p => p.callsign === newPlanes[index].callsign);\r\n            if (planeExists) {\r\n              console.log(`Plane ${newPlanes[index].callsign} already exists, skipping`);\r\n              index++;\r\n              return validPrevPlanes;\r\n            }\r\n            \r\n            const updatedPlanes = [...validPrevPlanes, newPlanes[index]];\r\n            console.log(`Added plane: ${newPlanes[index].callsign}`);\r\n            index++;\r\n            return updatedPlanes;\r\n          });\r\n        }, 200);\r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching aircraft in App component:', error);\r\n      }\r\n    };\r\n\r\n    fetchAircraft();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let lastTime = performance.now();\r\n\r\n    const interval = setInterval(() => {\r\n      const currentTime = performance.now();\r\n      const dt = (currentTime - lastTime) / 1000;\r\n      lastTime = currentTime;\r\n      \r\n      setPlanes((prevPlanes) =>\r\n        prevPlanes\r\n          .filter((p) => p && p.callsign && p.speed != null && p.lat != null && p.lng != null && p.heading != null)\r\n          .map((plane) => {\r\n            const speedKms = (plane.speed * 1.852) / 3600;\r\n            const headingRad = (plane.heading * Math.PI) / 180;\r\n            const earthRadius = 6371;\r\n\r\n            const deltaLat = (speedKms * Math.cos(headingRad) * dt) / earthRadius;\r\n            const deltaLon =\r\n              (speedKms * Math.sin(headingRad) * dt) /\r\n              (earthRadius * Math.cos((plane.lat * Math.PI) / 180));\r\n\r\n            const newLat = plane.lat + (deltaLat * 180) / Math.PI;\r\n            const newLng = plane.lng + (deltaLon * 180) / Math.PI;\r\n\r\n            return {\r\n              ...plane,\r\n              lat: newLat,\r\n              lng: newLng,\r\n              trail: [...plane.trail, [newLat, newLng]].slice(-50),\r\n            };\r\n          })\r\n      );\r\n    }, 4000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Filter out any invalid planes before passing to components\r\n  const validPlanes = planes.filter(plane => \r\n    plane && plane.callsign && plane.lat != null && plane.lng != null\r\n  );\r\n\r\n  return (\r\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\r\n      <WeatherControls\r\n        showClouds={showClouds}\r\n        setShowClouds={setShowClouds}\r\n        showWind={showWind}\r\n        setShowWind={setShowWind}\r\n        showPressure={showPressure}\r\n        setShowPressure={setShowPressure}\r\n      />\r\n\r\n      <button\r\n        style={{ position: \"absolute\", top: 80, left: 10, zIndex: 1000 }}\r\n        onClick={() => setRole(role === \"pilot\" ? \"controller\" : \"pilot\")}\r\n      >\r\n        Switch to {role === \"pilot\" ? \"Controller\" : \"Pilot\"} View\r\n      </button>\r\n\r\n      {role === \"pilot\" && selectedCallsign && (\r\n        <PilotATCPanel\r\n          plane={validPlanes.find((p) => p.callsign === selectedCallsign)}\r\n          onAccept={(callsign) => alert(`Accepted command for ${callsign}`)}\r\n          onDeny={(callsign) => alert(`Denied command for ${callsign}`)}\r\n        />\r\n      )}\r\n\r\n      {role === \"controller\" && selectedCallsign && (\r\n        <CommandPanel\r\n          plane={validPlanes.find((p) => p.callsign === selectedCallsign)}\r\n          onSendCommand={(callsign, type, value) =>\r\n            alert(`Sent command to ${callsign}: ${type} -> ${value}`)\r\n          }\r\n        />\r\n      )}\r\n\r\n      <AirspaceMap\r\n        planes={validPlanes}\r\n        selectedCallsign={selectedCallsign}\r\n        setSelectedCallsign={setSelectedCallsign}\r\n        showClouds={showClouds}\r\n        showWind={showWind}\r\n        showPressure={showPressure}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}