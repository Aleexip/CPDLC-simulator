{"ast":null,"code":"// Aircraft service for CPDLC simulator\n// Handles API calls to backend running on localhost:8081\n// Functions needed: fetchAircraft() - gets all aircraft from /api/aircraft endpoint\n// Should handle loading states and errors\n// Return aircraft array with callsign, latitude, longitude, altitude\n// Use modern async/await with fetch API\n\nconst API_BASE_URL = 'http://localhost:8081/api/aircraft';\nexport const aircraftService = {\n  // Service methods implementation\n  fetchAircraft: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/aircraft`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      return data; // Assuming data is an array of aircraft\n    } catch (error) {\n      console.error('Error fetching aircraft:', error);\n      throw error; // Re-throw to handle it in the calling code\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","aircraftService","fetchAircraft","response","fetch","ok","Error","data","json","error","console"],"sources":["D:/downloads/proiecte_programare/CPDLC_simulator/cpdlc-frontend/src/services/aircraftService.js"],"sourcesContent":["// Aircraft service for CPDLC simulator\r\n// Handles API calls to backend running on localhost:8081\r\n// Functions needed: fetchAircraft() - gets all aircraft from /api/aircraft endpoint\r\n// Should handle loading states and errors\r\n// Return aircraft array with callsign, latitude, longitude, altitude\r\n// Use modern async/await with fetch API\r\n\r\nconst API_BASE_URL = 'http://localhost:8081/api/aircraft';\r\n\r\nexport const aircraftService = {\r\n  // Service methods implementation\r\n    fetchAircraft: async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/aircraft`);\r\n        if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        return data; // Assuming data is an array of aircraft\r\n    } catch (error) {\r\n        console.error('Error fetching aircraft:', error);\r\n        throw error; // Re-throw to handle it in the calling code\r\n    }\r\n    },\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAG,oCAAoC;AAEzD,OAAO,MAAMC,eAAe,GAAG;EAC7B;EACEC,aAAa,EAAE,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,WAAW,CAAC;MACtD,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAClB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAC9C;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAAC,CAAC;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK,CAAC,CAAC;IACjB;EACA;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}