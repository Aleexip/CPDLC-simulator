{"ast":null,"code":"var _jsxFileName = \"D:\\\\downloads\\\\proiecte_programare\\\\CPDLC_simulator\\\\cpdlc-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\"; // Import React and necessary hooks for state management\n\nimport \"leaflet/dist/leaflet.css\"; // Import Leaflet CSS for proper map styling\n\nimport WeatherLayer from \"./components/Weather/WeatherLayer\"; // Import the WeatherLayer component for weather overlays\nimport WeatherControls from \"./components/Weather/WeatherControls\"; // Import the WeatherControls component for weather toggles\nimport PlaneMarker from \"./components/Aircraft/AircraftMarker\"; // Import the PlaneMarker component for individual plane markers\nimport MapContainer from \"./components/Map/MapContainer\"; // Import the MapContainer component for the main map\nimport AirspaceMap from \"./components/Map/MapContainer\"; // Import the AirspaceMap component for the main map\nimport PilotATCPanel from \"./components/Controller/PilotAtcPanel\"; // Import the PilotATCPanel component for pilot-ATC interactions\nimport ControllerATCPanel from \"./components/Controller/CommandPanel\"; // Import the ControllerATCPanel component for controller commands\nimport CommandPanel from \"./components/Controller/CommandPanel\";\nimport { aircraftService } from './services/aircraftService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State for each weather overlays\n  const [showClouds, setShowClouds] = useState(false);\n  const [showWind, setShowWind] = useState(false);\n  const [showPressure, setShowPressure] = useState(false);\n  const [role, setRole] = useState(\"controller\"); // \"controller\" or \"pilot\"\n  const [selectedCallsign, setSelectedCallsign] = useState(null); // Currently selected aircraft callsign\n\n  // Sample plane data\n  const [planes, setPlanes] = useState([\n    /*\r\n    {\r\n      icao: \"LZIB\",\r\n      flight_level: 350,\r\n      lat: 44.57,\r\n      lng: 27.48,\r\n      heading: 90,\r\n      speed: 450,\r\n      callsign: \"BUL123\",\r\n      trail: [[44.57, 27.48]],\r\n    },\r\n    {\r\n      icao: \"A320\",\r\n      flight_level: 320,\r\n      lat: 44.87,\r\n      lng: 26.48,\r\n      heading: 270,\r\n      speed: 430,\r\n      callsign: \"BUL456\",\r\n      trail: [[44.87, 26.48]],\r\n    },\r\n    {\r\n      icao: \"B737\",\r\n      flight_level: 300,\r\n      lat: 44.57,\r\n      lng: 25.48,\r\n      heading: 180,\r\n      speed: 400,\r\n      callsign: \"BUL789\",\r\n      trail: [[44.57, 25.48]],\r\n    },\r\n    {\r\n      icao: \"C172\",\r\n      flight_level: 100,\r\n      lat: 45.57,\r\n      lng: 24.48,\r\n      heading: 0,\r\n      speed: 120,\r\n      callsign: \"BUL101\",\r\n      trail: [[45.57, 24.48]],\r\n    },\r\n    {\r\n      icao: \"E190\",\r\n      flight_level: 280,\r\n      lat: 45.57,\r\n      lng: 23.48,\r\n      heading: 45,\r\n      speed: 500,\r\n      callsign: \"BUL202\",\r\n      trail: [[45.57, 23.48]],\r\n    }, \r\n    */\n  ]);\n  // Find the selected plane object based on selectedCallsign\n  const selectedPlane = planes.find(p => p.callsign === selectedCallsign) || null;\n\n  // Ref to hold the latest planes state\n  const planesRef = useRef([]);\n  planesRef.current = planes;\n\n  // Fetch aircraft data from backend on component mount\n  useEffect(() => {\n    const fetchAircraft = async () => {\n      try {\n        const data = await aircraftService.fetchAircraft();\n        const planesFromBackend = data.map(plane => ({\n          ...plane,\n          lat: plane.latitude,\n          lng: plane.longitude,\n          heading: plane.heading,\n          trail: [[plane.latitude, plane.longitude]]\n        }));\n        let index = 0;\n        const spwanInterval = setInterval(() => {\n          if (index >= planesFromBackend.length) return clearInterval(spwanInterval);\n          setPlanes(prev => [...prev, planesFromBackend[index]]);\n          index++;\n        }, 200); // spawn a new plane every 2 seconds\n      } catch (error) {\n        console.error('Error fetching aircraft in App component:', error);\n      }\n    };\n    fetchAircraft();\n  }, []);\n  useEffect(() => {\n    let animationFrameId;\n    const updatePositions = () => {\n      setPlanes(prevPlanes => prevPlanes.map(plane => {\n        // Simple movement logic: move in the direction of heading at speed\n        const speedKms = plane.speed * 1.852 / 3600; // knots -> km/s\n        const headingRad = plane.heading * Math.PI / 180;\n        const earthRadius = 6371;\n\n        // Calculate new position using  the haversine formula approximation\n        const deltaLat = speedKms * Math.cos(headingRad) / earthRadius;\n        const deltaLon = speedKms * Math.sin(headingRad) / (earthRadius * Math.cos(plane.lat * Math.PI / 180));\n\n        // Update lat/lon in degrees from radians\n        const newLat = plane.lat + deltaLat * 180 / Math.PI;\n        const newLng = plane.lng + deltaLon * 180 / Math.PI;\n        return {\n          ...plane,\n          lat: newLat,\n          lng: newLng,\n          trail: [...plane.trail, [newLat, newLng]].slice(-50) // keep last 50 positions\n        };\n      }));\n      animationFrameId = requestAnimationFrame(updatePositions);\n    };\n    animationFrameId = requestAnimationFrame(updatePositions);\n    return () => cancelAnimationFrame(animationFrameId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      width: \"100vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(WeatherControls, {\n      showClouds: showClouds,\n      setShowClouds: setShowClouds,\n      showWind: showWind,\n      setShowWind: setShowWind,\n      showPressure: showPressure,\n      setShowPressure: setShowPressure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        position: \"absolute\",\n        top: 80,\n        left: 10,\n        zIndex: 1000\n      },\n      onClick: () => setRole(role === \"pilot\" ? \"controller\" : \"pilot\"),\n      children: [\"Switch to \", role === \"pilot\" ? \"Controller\" : \"Pilot\", \" View\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), role === \"pilot\" && selectedPlane && /*#__PURE__*/_jsxDEV(PilotATCPanel, {\n      plane: planes.find(p => p.callsign === selectedCallsign),\n      onAccept: callsign => alert(`Accepted command for ${callsign}`),\n      onDeny: callsign => alert(`Denied command for ${callsign}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this), role === \"controller\" && selectedPlane && /*#__PURE__*/_jsxDEV(CommandPanel, {\n      plane: planes.find(p => p.callsign === selectedCallsign),\n      onSendCommand: (callsign, type, value) => alert(`Sent command to ${callsign}: ${type} -> ${value}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AirspaceMap, {\n      planes: planes,\n      selectedCallsign: selectedCallsign,\n      setSelectedCallsign: setSelectedCallsign,\n      showClouds: showClouds,\n      showWind: showWind,\n      showPressure: showPressure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"GQj5ckpAIypF4E9EptERkSPDidk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","WeatherLayer","WeatherControls","PlaneMarker","MapContainer","AirspaceMap","PilotATCPanel","ControllerATCPanel","CommandPanel","aircraftService","jsxDEV","_jsxDEV","App","_s","showClouds","setShowClouds","showWind","setShowWind","showPressure","setShowPressure","role","setRole","selectedCallsign","setSelectedCallsign","planes","setPlanes","selectedPlane","find","p","callsign","planesRef","current","fetchAircraft","data","planesFromBackend","map","plane","lat","latitude","lng","longitude","heading","trail","index","spwanInterval","setInterval","length","clearInterval","prev","error","console","animationFrameId","updatePositions","prevPlanes","speedKms","speed","headingRad","Math","PI","earthRadius","deltaLat","cos","deltaLon","sin","newLat","newLng","slice","requestAnimationFrame","cancelAnimationFrame","style","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","position","top","left","zIndex","onClick","onAccept","alert","onDeny","onSendCommand","type","value","_c","$RefreshReg$"],"sources":["D:/downloads/proiecte_programare/CPDLC_simulator/cpdlc-frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef} from \"react\"; // Import React and necessary hooks for state management\r\n\r\nimport \"leaflet/dist/leaflet.css\"; // Import Leaflet CSS for proper map styling\r\n\r\nimport WeatherLayer from \"./components/Weather/WeatherLayer\"; // Import the WeatherLayer component for weather overlays\r\nimport WeatherControls from \"./components/Weather/WeatherControls\"; // Import the WeatherControls component for weather toggles\r\nimport PlaneMarker from \"./components/Aircraft/AircraftMarker\"; // Import the PlaneMarker component for individual plane markers\r\nimport MapContainer from \"./components/Map/MapContainer\"; // Import the MapContainer component for the main map\r\nimport AirspaceMap from \"./components/Map/MapContainer\"; // Import the AirspaceMap component for the main map\r\nimport PilotATCPanel from \"./components/Controller/PilotAtcPanel\"; // Import the PilotATCPanel component for pilot-ATC interactions\r\nimport ControllerATCPanel from \"./components/Controller/CommandPanel\"; // Import the ControllerATCPanel component for controller commands\r\nimport CommandPanel from \"./components/Controller/CommandPanel\";\r\n\r\nimport { aircraftService } from './services/aircraftService';\r\n\r\n\r\nfunction App() {\r\n  // State for each weather overlays\r\n  const [showClouds, setShowClouds] = useState(false);\r\n  const [showWind, setShowWind] = useState(false);\r\n  const [showPressure, setShowPressure] = useState(false);\r\n\r\n  const [role, setRole] = useState(\"controller\"); // \"controller\" or \"pilot\"\r\n  const [selectedCallsign, setSelectedCallsign] = useState(null); // Currently selected aircraft callsign\r\n  \r\n  // Sample plane data\r\n  const [planes, setPlanes] = useState([\r\n    /*\r\n    {\r\n      icao: \"LZIB\",\r\n      flight_level: 350,\r\n      lat: 44.57,\r\n      lng: 27.48,\r\n      heading: 90,\r\n      speed: 450,\r\n      callsign: \"BUL123\",\r\n      trail: [[44.57, 27.48]],\r\n    },\r\n    {\r\n      icao: \"A320\",\r\n      flight_level: 320,\r\n      lat: 44.87,\r\n      lng: 26.48,\r\n      heading: 270,\r\n      speed: 430,\r\n      callsign: \"BUL456\",\r\n      trail: [[44.87, 26.48]],\r\n    },\r\n    {\r\n      icao: \"B737\",\r\n      flight_level: 300,\r\n      lat: 44.57,\r\n      lng: 25.48,\r\n      heading: 180,\r\n      speed: 400,\r\n      callsign: \"BUL789\",\r\n      trail: [[44.57, 25.48]],\r\n    },\r\n    {\r\n      icao: \"C172\",\r\n      flight_level: 100,\r\n      lat: 45.57,\r\n      lng: 24.48,\r\n      heading: 0,\r\n      speed: 120,\r\n      callsign: \"BUL101\",\r\n      trail: [[45.57, 24.48]],\r\n    },\r\n    {\r\n      icao: \"E190\",\r\n      flight_level: 280,\r\n      lat: 45.57,\r\n      lng: 23.48,\r\n      heading: 45,\r\n      speed: 500,\r\n      callsign: \"BUL202\",\r\n      trail: [[45.57, 23.48]],\r\n    }, \r\n    */\r\n  ]);\r\n  // Find the selected plane object based on selectedCallsign\r\n   const selectedPlane = planes.find((p) => p.callsign === selectedCallsign) || null;\r\n\r\n   // Ref to hold the latest planes state\r\n  const planesRef = useRef([]);\r\n  planesRef.current = planes;\r\n\r\n  // Fetch aircraft data from backend on component mount\r\n  useEffect(() => {\r\n  const fetchAircraft = async () => {\r\n    try {\r\n      const data = await aircraftService.fetchAircraft();\r\n      const planesFromBackend = data.map((plane) => ({\r\n        ...plane,\r\n        lat: plane.latitude,\r\n        lng: plane.longitude,\r\n        heading: plane.heading,\r\n        trail: [[plane.latitude, plane.longitude]], \r\n      }));\r\n      \r\n      let index = 0;\r\n      const spwanInterval = setInterval(() => {\r\n        if(index >= planesFromBackend.length) return clearInterval(spwanInterval);\r\n        setPlanes(prev=> [...prev, planesFromBackend[index]]);\r\n        index++;\r\n      }, 200); // spawn a new plane every 2 seconds\r\n      } catch (error) \r\n      {\r\n        console.error('Error fetching aircraft in App component:', error);\r\n      }\r\n    };\r\n\r\n  fetchAircraft();\r\n}, []);\r\n\r\n  useEffect(() => {\r\n    let animationFrameId;\r\n\r\n    const updatePositions = () => {\r\n      setPlanes((prevPlanes) =>\r\n        prevPlanes.map((plane) => {\r\n          // Simple movement logic: move in the direction of heading at speed\r\n          const speedKms = (plane.speed * 1.852) / 3600; // knots -> km/s\r\n          const headingRad = (plane.heading * Math.PI) / 180;\r\n          const earthRadius = 6371;\r\n\r\n          // Calculate new position using  the haversine formula approximation\r\n          const deltaLat = (speedKms * Math.cos(headingRad)) / earthRadius;\r\n          const deltaLon =\r\n            (speedKms * Math.sin(headingRad)) / (earthRadius * Math.cos((plane.lat * Math.PI) / 180));\r\n\r\n            // Update lat/lon in degrees from radians\r\n          const newLat = plane.lat + (deltaLat * 180) / Math.PI;\r\n          const newLng = plane.lng + (deltaLon * 180) / Math.PI;\r\n\r\n          return {\r\n            ...plane,\r\n            lat: newLat,\r\n            lng: newLng,\r\n            trail: [...plane.trail, [newLat, newLng]].slice(-50), // keep last 50 positions\r\n          };\r\n        })\r\n      );\r\n\r\n      animationFrameId = requestAnimationFrame(updatePositions);\r\n    };\r\n\r\n    animationFrameId = requestAnimationFrame(updatePositions);\r\n    return () => cancelAnimationFrame(animationFrameId);\r\n  }, []);\r\n  return (\r\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\r\n      <WeatherControls\r\n        showClouds={showClouds}\r\n        setShowClouds={setShowClouds}\r\n        showWind={showWind}\r\n        setShowWind={setShowWind}\r\n        showPressure={showPressure}\r\n        setShowPressure={setShowPressure}\r\n      />\r\n\r\n      {/*Role toggle*/}\r\n      <button\r\n        style={{ position: \"absolute\", top: 80, left: 10, zIndex: 1000 }}\r\n        onClick={() => setRole(role === \"pilot\" ? \"controller\" : \"pilot\")}\r\n      >\r\n        Switch to {role === \"pilot\" ? \"Controller\" : \"Pilot\"} View\r\n      </button>\r\n\r\n    \r\n      {/* Pilot  Panel */}\r\n      {role === \"pilot\" && selectedPlane && (\r\n        <PilotATCPanel\r\n          plane={planes.find((p) => p.callsign === selectedCallsign)}\r\n          onAccept={(callsign) => alert(`Accepted command for ${callsign}`)}\r\n          onDeny={(callsign) => alert(`Denied command for ${callsign}`)}\r\n        />\r\n      )}\r\n\r\n      {/* Controller Panel */}\r\n      {role === \"controller\" && selectedPlane && (\r\n        <CommandPanel\r\n          plane={planes.find((p) => p.callsign === selectedCallsign)}\r\n          onSendCommand={(callsign, type, value) =>\r\n            alert(`Sent command to ${callsign}: ${type} -> ${value}`)\r\n          }\r\n        />\r\n      )}\r\n\r\n      {/* Main Map */}\r\n      <AirspaceMap\r\n        planes={planes}\r\n        selectedCallsign={selectedCallsign}\r\n        setSelectedCallsign={setSelectedCallsign}\r\n        showClouds={showClouds}\r\n        showWind={showWind}\r\n        showPressure={showPressure}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}