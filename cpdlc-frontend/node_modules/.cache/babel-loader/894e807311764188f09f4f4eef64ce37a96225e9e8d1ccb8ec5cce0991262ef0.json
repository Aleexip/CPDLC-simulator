{"ast":null,"code":"var _jsxFileName = \"D:\\\\downloads\\\\proiecte_programare\\\\CPDLC_simulator\\\\cpdlc-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\"; // Import React and necessary hooks for state management\n\nimport \"leaflet/dist/leaflet.css\"; // Import Leaflet CSS for proper map styling\n\nimport WeatherLayer from \"./components/Weather/WeatherLayer\"; // Import the WeatherLayer component for weather overlays\nimport WeatherControls from \"./components/Weather/WeatherControls\"; // Import the WeatherControls component for weather toggles\nimport PlaneMarker from \"./components/Aircraft/AircraftMarker\"; // Import the PlaneMarker component for individual plane markers\nimport MapContainer from \"./components/Map/MapContainer\"; // Import the MapContainer component for the main map\nimport AirspaceMap from \"./components/Map/MapContainer\"; // Import the AirspaceMap component for the main map\nimport PilotATCPanel from \"./components/Controller/PilotAtcPanel\"; // Import the PilotATCPanel component for pilot-ATC interactions\nimport ControllerATCPanel from \"./components/Controller/CommandPanel\"; // Import the ControllerATCPanel component for controller commands\nimport CommandPanel from \"./components/Controller/CommandPanel\";\nimport { aircraftService } from './services/aircraftService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State for each weather overlays\n  const [showClouds, setShowClouds] = useState(false);\n  const [showWind, setShowWind] = useState(false);\n  const [showPressure, setShowPressure] = useState(false);\n  const [role, setRole] = useState(\"controller\"); // \"controller\" or \"pilot\"\n  const [selectedCallsign, setSelectedCallsign] = useState(null); // Currently selected aircraft callsign\n\n  // Sample plane data\n  const [planes, setPlanes] = useState([]);\n  // Ref to hold the latest planes state\n  const planesRef = useRef([]);\n  planesRef.current = planes;\n\n  // Fetch aircraft data from backend on component mount\n  useEffect(() => {\n    const fetchAircraft = async () => {\n      try {\n        const data = await aircraftService.fetchAircraft();\n        const planesFromBackend = data.map(plane => ({\n          ...plane,\n          lat: plane.latitude,\n          lng: plane.longitude,\n          heading: plane.heading,\n          trail: [[plane.latitude, plane.longitude]],\n          id: plane.callsign + '_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9) // unique id\n        }));\n\n        // Filter out planes that are already present\n        const existingCallsigns = new Set(planesRef.current.map(p => p.callsign));\n        const newPlanes = planesFromBackend.filter(plane => !existingCallsigns.has(plane.callsign));\n        let index = 0;\n        const spwanInterval = setInterval(() => {\n          if (index >= newPlanes.length) {\n            clearInterval(spawnInterval);\n            return;\n          }\n          setPlanes(prev => {\n            // Check if plane already exists to prevent duplicates\n            const planeExists = prev.some(p => p.callsign === newPlanes[index].callsign);\n            if (planeExists) {\n              console.log(`Plane ${newPlanes[index].callsign} already exists, skipping`);\n              index++;\n              return prev;\n            }\n            const updatedPlanes = [...prev, newPlanes[index]];\n            index++;\n            return updatedPlanes;\n          });\n        }, 200);\n      } catch (error) {\n        console.error('Error fetching aircraft in App component:', error);\n      }\n    };\n    fetchAircraft();\n  }, []);\n  useEffect(() => {\n    let lastTime = performance.now();\n    const interval = setInterval(() => {\n      const currentTime = performance.now();\n      const dt = (currentTime - lastTime) / 1000; // seconds between frames\n      lastTime = currentTime;\n      // update plane positions based on speed and heading\n      setPlanes(prevPlanes => prevPlanes.filter(p => p && p.speed && p.lat && p.lng).map(plane => {\n        const speedKms = plane.speed * 1.852 / 3600;\n        const headingRad = plane.heading * Math.PI / 180;\n        const earthRadius = 6371;\n        const deltaLat = speedKms * Math.cos(headingRad) * dt / earthRadius; // calculate change in latitude\n        const deltaLon = speedKms * Math.sin(headingRad) * dt / (earthRadius * Math.cos(plane.lat * Math.PI / 180)); // change in longitude\n\n        const newLat = plane.lat + deltaLat * 180 / Math.PI;\n        const newLng = plane.lng + deltaLon * 180 / Math.PI;\n        return {\n          ...plane,\n          lat: newLat,\n          lng: newLng,\n          trail: [...plane.trail, [newLat, newLng]].slice(-50)\n        };\n      }));\n    }, 4000); // Update every 2 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      width: \"100vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(WeatherControls, {\n      showClouds: showClouds,\n      setShowClouds: setShowClouds,\n      showWind: showWind,\n      setShowWind: setShowWind,\n      showPressure: showPressure,\n      setShowPressure: setShowPressure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        position: \"absolute\",\n        top: 80,\n        left: 10,\n        zIndex: 1000\n      },\n      onClick: () => setRole(role === \"pilot\" ? \"controller\" : \"pilot\"),\n      children: [\"Switch to \", role === \"pilot\" ? \"Controller\" : \"Pilot\", \" View\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), role === \"pilot\" && selectedCallsign && /*#__PURE__*/_jsxDEV(PilotATCPanel, {\n      plane: planes.find(p => p.callsign === selectedCallsign),\n      onAccept: callsign => alert(`Accepted command for ${callsign}`),\n      onDeny: callsign => alert(`Denied command for ${callsign}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), role === \"controller\" && selectedCallsign && /*#__PURE__*/_jsxDEV(CommandPanel, {\n      plane: planes.find(p => p.callsign === selectedCallsign),\n      onSendCommand: (callsign, type, value) => alert(`Sent command to ${callsign}: ${type} -> ${value}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AirspaceMap, {\n      planes: planes,\n      selectedCallsign: selectedCallsign,\n      setSelectedCallsign: setSelectedCallsign,\n      showClouds: showClouds,\n      showWind: showWind,\n      showPressure: showPressure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xuC4PPPSl/JXWiwnyAwPz2qVzF0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","WeatherLayer","WeatherControls","PlaneMarker","MapContainer","AirspaceMap","PilotATCPanel","ControllerATCPanel","CommandPanel","aircraftService","jsxDEV","_jsxDEV","App","_s","showClouds","setShowClouds","showWind","setShowWind","showPressure","setShowPressure","role","setRole","selectedCallsign","setSelectedCallsign","planes","setPlanes","planesRef","current","fetchAircraft","data","planesFromBackend","map","plane","lat","latitude","lng","longitude","heading","trail","id","callsign","Date","now","Math","random","toString","substr","existingCallsigns","Set","p","newPlanes","filter","has","index","spwanInterval","setInterval","length","clearInterval","spawnInterval","prev","planeExists","some","console","log","updatedPlanes","error","lastTime","performance","interval","currentTime","dt","prevPlanes","speed","speedKms","headingRad","PI","earthRadius","deltaLat","cos","deltaLon","sin","newLat","newLng","slice","style","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","position","top","left","zIndex","onClick","find","onAccept","alert","onDeny","onSendCommand","type","value","_c","$RefreshReg$"],"sources":["D:/downloads/proiecte_programare/CPDLC_simulator/cpdlc-frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef} from \"react\"; // Import React and necessary hooks for state management\r\n\r\nimport \"leaflet/dist/leaflet.css\"; // Import Leaflet CSS for proper map styling\r\n\r\nimport WeatherLayer from \"./components/Weather/WeatherLayer\"; // Import the WeatherLayer component for weather overlays\r\nimport WeatherControls from \"./components/Weather/WeatherControls\"; // Import the WeatherControls component for weather toggles\r\nimport PlaneMarker from \"./components/Aircraft/AircraftMarker\"; // Import the PlaneMarker component for individual plane markers\r\nimport MapContainer from \"./components/Map/MapContainer\"; // Import the MapContainer component for the main map\r\nimport AirspaceMap from \"./components/Map/MapContainer\"; // Import the AirspaceMap component for the main map\r\nimport PilotATCPanel from \"./components/Controller/PilotAtcPanel\"; // Import the PilotATCPanel component for pilot-ATC interactions\r\nimport ControllerATCPanel from \"./components/Controller/CommandPanel\"; // Import the ControllerATCPanel component for controller commands\r\nimport CommandPanel from \"./components/Controller/CommandPanel\";\r\n\r\nimport { aircraftService } from './services/aircraftService';\r\n\r\n\r\nfunction App() {\r\n  // State for each weather overlays\r\n  const [showClouds, setShowClouds] = useState(false);\r\n  const [showWind, setShowWind] = useState(false);\r\n  const [showPressure, setShowPressure] = useState(false);\r\n\r\n  const [role, setRole] = useState(\"controller\"); // \"controller\" or \"pilot\"\r\n  const [selectedCallsign, setSelectedCallsign] = useState(null); // Currently selected aircraft callsign\r\n  \r\n  // Sample plane data\r\n  const [planes, setPlanes] = useState([]);\r\n   // Ref to hold the latest planes state\r\n  const planesRef = useRef([]);\r\n  planesRef.current = planes;\r\n\r\n  // Fetch aircraft data from backend on component mount\r\n  useEffect(() => {\r\n  const fetchAircraft = async () => {\r\n    try {\r\n      const data = await aircraftService.fetchAircraft();\r\n      const planesFromBackend = data.map((plane) => ({\r\n        ...plane,\r\n        lat: plane.latitude,\r\n        lng: plane.longitude,\r\n        heading: plane.heading,\r\n        trail: [[plane.latitude, plane.longitude]], \r\n        id: plane.callsign + '_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9) // unique id\r\n      }));\r\n      \r\n      // Filter out planes that are already present\r\n      const existingCallsigns = new Set(planesRef.current.map(p => p.callsign));\r\n        const newPlanes = planesFromBackend.filter(plane => !existingCallsigns.has(plane.callsign));\r\n      \r\n      let index = 0;\r\n      const spwanInterval = setInterval(() => {\r\n        if (index >= newPlanes.length) {\r\n            clearInterval(spawnInterval);\r\n            return;\r\n          }\r\n      setPlanes(prev => {\r\n            // Check if plane already exists to prevent duplicates\r\n            const planeExists = prev.some(p => p.callsign === newPlanes[index].callsign);\r\n            if (planeExists) {\r\n              console.log(`Plane ${newPlanes[index].callsign} already exists, skipping`);\r\n              index++;\r\n              return prev;\r\n            }\r\n            \r\n            const updatedPlanes = [...prev, newPlanes[index]];\r\n            index++;\r\n            return updatedPlanes;\r\n          });\r\n        }, 200);\r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching aircraft in App component:', error);\r\n      }\r\n    };\r\n\r\n    fetchAircraft();\r\n  }, []);\r\n\r\nuseEffect(() => {\r\n  let lastTime = performance.now();\r\n\r\n  const interval = setInterval(() => {\r\n    const currentTime = performance.now();\r\n    const dt = (currentTime - lastTime) / 1000; // seconds between frames\r\n    lastTime = currentTime;\r\n     // update plane positions based on speed and heading\r\n    setPlanes((prevPlanes) =>\r\n      prevPlanes\r\n        .filter((p) => p && p.speed && p.lat && p.lng)\r\n        .map((plane) => {\r\n          const speedKms = (plane.speed * 1.852) / 3600;\r\n          const headingRad = (plane.heading * Math.PI) / 180;\r\n          const earthRadius = 6371;\r\n\r\n          const deltaLat = (speedKms * Math.cos(headingRad) * dt) / earthRadius; // calculate change in latitude\r\n          const deltaLon =\r\n            (speedKms * Math.sin(headingRad) * dt) /\r\n            (earthRadius * Math.cos((plane.lat * Math.PI) / 180)); // change in longitude\r\n\r\n          const newLat = plane.lat + (deltaLat * 180) / Math.PI;\r\n          const newLng = plane.lng + (deltaLon * 180) / Math.PI;\r\n\r\n          return {\r\n            ...plane,\r\n            lat: newLat,\r\n            lng: newLng,\r\n            trail: [...plane.trail, [newLat, newLng]].slice(-50),\r\n          };\r\n        })\r\n    );\r\n  }, 4000); // Update every 2 seconds\r\n\r\n  return () => clearInterval(interval);\r\n}, []);\r\n\r\n  return (\r\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\r\n      <WeatherControls\r\n        showClouds={showClouds}\r\n        setShowClouds={setShowClouds}\r\n        showWind={showWind}\r\n        setShowWind={setShowWind}\r\n        showPressure={showPressure}\r\n        setShowPressure={setShowPressure}\r\n      />\r\n\r\n      {/*Role toggle*/}\r\n      <button\r\n        style={{ position: \"absolute\", top: 80, left: 10, zIndex: 1000 }}\r\n        onClick={() => setRole(role === \"pilot\" ? \"controller\" : \"pilot\")}\r\n      >\r\n        Switch to {role === \"pilot\" ? \"Controller\" : \"Pilot\"} View\r\n      </button>\r\n\r\n    \r\n      {/* Pilot  Panel */}\r\n      {role === \"pilot\" && selectedCallsign && (\r\n        <PilotATCPanel\r\n          plane={planes.find((p) => p.callsign === selectedCallsign)}\r\n          onAccept={(callsign) => alert(`Accepted command for ${callsign}`)}\r\n          onDeny={(callsign) => alert(`Denied command for ${callsign}`)}\r\n        />\r\n      )}\r\n\r\n      {/* Controller Panel */}\r\n      {role === \"controller\" && selectedCallsign && (\r\n        <CommandPanel\r\n          plane={planes.find((p) => p.callsign === selectedCallsign)}\r\n          onSendCommand={(callsign, type, value) =>\r\n            alert(`Sent command to ${callsign}: ${type} -> ${value}`)\r\n          }\r\n        />\r\n      )}\r\n\r\n      {/* Main Map */}\r\n      <AirspaceMap\r\n        planes={planes}\r\n        selectedCallsign={selectedCallsign}\r\n        setSelectedCallsign={setSelectedCallsign}\r\n        showClouds={showClouds}\r\n        showWind={showWind}\r\n        showPressure={showPressure}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}