{"ast":null,"code":"var _jsxFileName = \"D:\\\\downloads\\\\proiecte_programare\\\\CPDLC_simulator\\\\cpdlc-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"leaflet/dist/leaflet.css\";\nimport WeatherLayer from \"./components/Weather/WeatherLayer\";\nimport WeatherControls from \"./components/Weather/WeatherControls\";\nimport PlaneMarker from \"./components/Aircraft/AircraftMarker\";\nimport AirspaceMap from \"./components/Map/MapContainer\";\nimport PilotATCPanel from \"./components/Controller/PilotAtcPanel\";\nimport CommandPanel from \"./components/Controller/CommandPanel\";\nimport { aircraftService } from './services/aircraftService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [showClouds, setShowClouds] = useState(false);\n  const [showWind, setShowWind] = useState(false);\n  const [showPressure, setShowPressure] = useState(false);\n  const [role, setRole] = useState(\"controller\");\n  const [selectedCallsign, setSelectedCallsign] = useState(null);\n  const [planes, setPlanes] = useState([]);\n  const planesRef = useRef(planes);\n\n  // Fetch aircraft data from backend on component mount\n  useEffect(() => {\n    const fetchAircraft = async () => {\n      try {\n        const data = await aircraftService.fetchAircraft();\n        console.log('Raw data from API:', data);\n\n        // Transform and validate all planes at once\n        const validPlanes = data.filter(plane => plane && plane.callsign && plane.latitude != null && plane.longitude != null).map((plane, index) => ({\n          ...plane,\n          lat: plane.latitude,\n          lng: plane.longitude,\n          heading: plane.heading || 0,\n          speed: plane.speed || 0,\n          flight_level: plane.flight_level || 0,\n          trail: [[plane.latitude, plane.longitude]],\n          id: `${plane.callsign}_${Date.now()}_${index}` // Unique ID\n        }));\n        console.log('Valid planes to add:', validPlanes);\n\n        // Add all planes at once instead of staggered\n        setPlanes(prevPlanes => {\n          // Get existing callsigns to avoid duplicates\n          const existingCallsigns = new Set(prevPlanes.filter(p => p === null || p === void 0 ? void 0 : p.callsign).map(p => p.callsign));\n\n          // Filter out planes that already exist\n          const newPlanes = validPlanes.filter(plane => !existingCallsigns.has(plane.callsign));\n          console.log('New unique planes:', newPlanes);\n          return [...prevPlanes, ...newPlanes];\n        });\n      } catch (error) {\n        console.error('Error fetching aircraft in App component:', error);\n      }\n    };\n    fetchAircraft();\n  }, []); // Empty dependency array - run once on mount\n\n  // Update plane positions\n  useEffect(() => {\n    let lastTime = performance.now();\n    const interval = setInterval(() => {\n      const currentTime = performance.now();\n      const dt = (currentTime - lastTime) / 1000;\n      lastTime = currentTime;\n      setPlanes(prevPlanes => prevPlanes.filter(p => p && p.callsign && p.speed != null && p.lat != null && p.lng != null && p.heading != null).map(plane => {\n        const speedKms = plane.speed * 1.852 / 3600;\n        const headingRad = plane.heading * Math.PI / 180;\n        const earthRadius = 6371;\n        const deltaLat = speedKms * Math.cos(headingRad) * dt / earthRadius;\n        const deltaLon = speedKms * Math.sin(headingRad) * dt / (earthRadius * Math.cos(plane.lat * Math.PI / 180));\n        const newLat = plane.lat + deltaLat * 180 / Math.PI;\n        const newLng = plane.lng + deltaLon * 180 / Math.PI;\n        return {\n          ...plane,\n          lat: newLat,\n          lng: newLng,\n          trail: [...plane.trail, [newLat, newLng]].slice(-50)\n        };\n      }));\n    }, 4000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Update ref when planes change\n  useEffect(() => {\n    planesRef.current = planes;\n  }, [planes]);\n\n  // Filter out any invalid planes before passing to components\n  const validPlanes = planes.filter(plane => plane && plane.callsign && plane.lat != null && plane.lng != null);\n  console.log('Current planes state:', planes);\n  console.log('Valid planes for rendering:', validPlanes);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      width: \"100vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(WeatherControls, {\n      showClouds: showClouds,\n      setShowClouds: setShowClouds,\n      showWind: showWind,\n      setShowWind: setShowWind,\n      showPressure: showPressure,\n      setShowPressure: setShowPressure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        position: \"absolute\",\n        top: 80,\n        left: 10,\n        zIndex: 1000\n      },\n      onClick: () => setRole(role === \"pilot\" ? \"controller\" : \"pilot\"),\n      children: [\"Switch to \", role === \"pilot\" ? \"Controller\" : \"Pilot\", \" View\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), role === \"pilot\" && selectedCallsign && /*#__PURE__*/_jsxDEV(PilotATCPanel, {\n      plane: validPlanes.find(p => p.callsign === selectedCallsign),\n      onAccept: callsign => alert(`Accepted command for ${callsign}`),\n      onDeny: callsign => alert(`Denied command for ${callsign}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this), role === \"controller\" && selectedCallsign && /*#__PURE__*/_jsxDEV(CommandPanel, {\n      plane: validPlanes.find(p => p.callsign === selectedCallsign),\n      onSendCommand: (callsign, type, value) => alert(`Sent command to ${callsign}: ${type} -> ${value}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AirspaceMap, {\n      planes: validPlanes,\n      selectedCallsign: selectedCallsign,\n      setSelectedCallsign: setSelectedCallsign,\n      showClouds: showClouds,\n      showWind: showWind,\n      showPressure: showPressure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Fsqn2ejWoWfaBiobgb5dovLM7cE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","WeatherLayer","WeatherControls","PlaneMarker","AirspaceMap","PilotATCPanel","CommandPanel","aircraftService","jsxDEV","_jsxDEV","App","_s","showClouds","setShowClouds","showWind","setShowWind","showPressure","setShowPressure","role","setRole","selectedCallsign","setSelectedCallsign","planes","setPlanes","planesRef","fetchAircraft","data","console","log","validPlanes","filter","plane","callsign","latitude","longitude","map","index","lat","lng","heading","speed","flight_level","trail","id","Date","now","prevPlanes","existingCallsigns","Set","p","newPlanes","has","error","lastTime","performance","interval","setInterval","currentTime","dt","speedKms","headingRad","Math","PI","earthRadius","deltaLat","cos","deltaLon","sin","newLat","newLng","slice","clearInterval","current","style","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","position","top","left","zIndex","onClick","find","onAccept","alert","onDeny","onSendCommand","type","value","_c","$RefreshReg$"],"sources":["D:/downloads/proiecte_programare/CPDLC_simulator/cpdlc-frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nimport WeatherLayer from \"./components/Weather/WeatherLayer\";\r\nimport WeatherControls from \"./components/Weather/WeatherControls\";\r\nimport PlaneMarker from \"./components/Aircraft/AircraftMarker\";\r\nimport AirspaceMap from \"./components/Map/MapContainer\";\r\nimport PilotATCPanel from \"./components/Controller/PilotAtcPanel\";\r\nimport CommandPanel from \"./components/Controller/CommandPanel\";\r\n\r\nimport { aircraftService } from './services/aircraftService';\r\n\r\nfunction App() {\r\n  const [showClouds, setShowClouds] = useState(false);\r\n  const [showWind, setShowWind] = useState(false);\r\n  const [showPressure, setShowPressure] = useState(false);\r\n\r\n  const [role, setRole] = useState(\"controller\");\r\n  const [selectedCallsign, setSelectedCallsign] = useState(null);\r\n  \r\n  const [planes, setPlanes] = useState([]);\r\n  const planesRef = useRef(planes);\r\n\r\n  // Fetch aircraft data from backend on component mount\r\n  useEffect(() => {\r\n    const fetchAircraft = async () => {\r\n      try {\r\n        const data = await aircraftService.fetchAircraft();\r\n        console.log('Raw data from API:', data);\r\n        \r\n        // Transform and validate all planes at once\r\n        const validPlanes = data\r\n          .filter(plane => plane && plane.callsign && plane.latitude != null && plane.longitude != null)\r\n          .map((plane, index) => ({\r\n            ...plane,\r\n            lat: plane.latitude,\r\n            lng: plane.longitude,\r\n            heading: plane.heading || 0,\r\n            speed: plane.speed || 0,\r\n            flight_level: plane.flight_level || 0,\r\n            trail: [[plane.latitude, plane.longitude]],\r\n            id: `${plane.callsign}_${Date.now()}_${index}` // Unique ID\r\n          }));\r\n        \r\n        console.log('Valid planes to add:', validPlanes);\r\n        \r\n        // Add all planes at once instead of staggered\r\n        setPlanes(prevPlanes => {\r\n          // Get existing callsigns to avoid duplicates\r\n          const existingCallsigns = new Set(\r\n            prevPlanes.filter(p => p?.callsign).map(p => p.callsign)\r\n          );\r\n          \r\n          // Filter out planes that already exist\r\n          const newPlanes = validPlanes.filter(plane => \r\n            !existingCallsigns.has(plane.callsign)\r\n          );\r\n          \r\n          console.log('New unique planes:', newPlanes);\r\n          return [...prevPlanes, ...newPlanes];\r\n        });\r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching aircraft in App component:', error);\r\n      }\r\n    };\r\n\r\n    fetchAircraft();\r\n  }, []); // Empty dependency array - run once on mount\r\n\r\n  // Update plane positions\r\n  useEffect(() => {\r\n    let lastTime = performance.now();\r\n\r\n    const interval = setInterval(() => {\r\n      const currentTime = performance.now();\r\n      const dt = (currentTime - lastTime) / 1000;\r\n      lastTime = currentTime;\r\n      \r\n      setPlanes((prevPlanes) =>\r\n        prevPlanes\r\n          .filter((p) => p && p.callsign && p.speed != null && p.lat != null && p.lng != null && p.heading != null)\r\n          .map((plane) => {\r\n            const speedKms = (plane.speed * 1.852) / 3600;\r\n            const headingRad = (plane.heading * Math.PI) / 180;\r\n            const earthRadius = 6371;\r\n\r\n            const deltaLat = (speedKms * Math.cos(headingRad) * dt) / earthRadius;\r\n            const deltaLon =\r\n              (speedKms * Math.sin(headingRad) * dt) /\r\n              (earthRadius * Math.cos((plane.lat * Math.PI) / 180));\r\n\r\n            const newLat = plane.lat + (deltaLat * 180) / Math.PI;\r\n            const newLng = plane.lng + (deltaLon * 180) / Math.PI;\r\n\r\n            return {\r\n              ...plane,\r\n              lat: newLat,\r\n              lng: newLng,\r\n              trail: [...plane.trail, [newLat, newLng]].slice(-50),\r\n            };\r\n          })\r\n      );\r\n    }, 4000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Update ref when planes change\r\n  useEffect(() => {\r\n    planesRef.current = planes;\r\n  }, [planes]);\r\n\r\n  // Filter out any invalid planes before passing to components\r\n  const validPlanes = planes.filter(plane => \r\n    plane && plane.callsign && plane.lat != null && plane.lng != null\r\n  );\r\n\r\n  console.log('Current planes state:', planes);\r\n  console.log('Valid planes for rendering:', validPlanes);\r\n\r\n  return (\r\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\r\n      <WeatherControls\r\n        showClouds={showClouds}\r\n        setShowClouds={setShowClouds}\r\n        showWind={showWind}\r\n        setShowWind={setShowWind}\r\n        showPressure={showPressure}\r\n        setShowPressure={setShowPressure}\r\n      />\r\n\r\n      <button\r\n        style={{ position: \"absolute\", top: 80, left: 10, zIndex: 1000 }}\r\n        onClick={() => setRole(role === \"pilot\" ? \"controller\" : \"pilot\")}\r\n      >\r\n        Switch to {role === \"pilot\" ? \"Controller\" : \"Pilot\"} View\r\n      </button>\r\n\r\n      {role === \"pilot\" && selectedCallsign && (\r\n        <PilotATCPanel\r\n          plane={validPlanes.find((p) => p.callsign === selectedCallsign)}\r\n          onAccept={(callsign) => alert(`Accepted command for ${callsign}`)}\r\n          onDeny={(callsign) => alert(`Denied command for ${callsign}`)}\r\n        />\r\n      )}\r\n\r\n      {role === \"controller\" && selectedCallsign && (\r\n        <CommandPanel\r\n          plane={validPlanes.find((p) => p.callsign === selectedCallsign)}\r\n          onSendCommand={(callsign, type, value) =>\r\n            alert(`Sent command to ${callsign}: ${type} -> ${value}`)\r\n          }\r\n        />\r\n      )}\r\n\r\n      <AirspaceMap\r\n        planes={validPlanes}\r\n        selectedCallsign={selectedCallsign}\r\n        setSelectedCallsign={setSelectedCallsign}\r\n        showClouds={showClouds}\r\n        showWind={showWind}\r\n        showPressure={showPressure}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}